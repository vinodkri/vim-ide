snippet foridx "for loop with idx as iter, define loop counter" b
	for (idx = 0; idx < $1; ++idx)
	{
		$0
	}
endsnippet

snippet for "for loop, define iter and loop counter" b
	for ($1 = 0; $1 < $2; ++$1)
	{
		$0
	}
endsnippet

snippet forvs "for loop, paste previour visual selection, define iter and loop count" b
	for ($1 = 0; $1 < $2; ++$1)
	{
		$0${VISUAL}
	}
endsnippet

snippet if "if, define cond" b
	if ($1)
	{
		$0
	}
endsnippet

snippet ifeq "if eq cond" b
	if ($1 == $2)
	{
		$0
	}
endsnippet

snippet ifneq "if not eq cond" b
	if ($1 != $2)
	{
		$0
	}
endsnippet

snippet ifnulleq "if null eq cond" b
	if (NULL == $1)
	{
		$0
	}
endsnippet

snippet ifnullneq "if null not eq cond" b
	if (NULL != $1)
	{
		$0
	}
endsnippet

snippet and "and cond"
	($1 && $2)
endsnippet

snippet or "or cond"
	($1 || $2)
endsnippet

snippet lt "less than cond"
	($1 < $2)
endsnippet

snippet lteq "less than eq cond"
	($1 <= $2)
endsnippet

snippet gt "greater than cond"
	($1 > $2)
endsnippet

snippet gteq "greate than eq cond"
	($1 >= $2)
endsnippet

snippet print "printf" b
printf("$1\n"$2);$0
endsnippet

snippet snprintf "snprintf" b
snprintf(${1:buff}, ${2:size}, "$3", $4);
endsnippet

global !p
def complete(t, opts):
	if t:
		opts = [ m[len(t):] for m in opts if m.startswith(t) ]
	if len(opts) == 1:
		return opts[0]
	return '(' + '|'.join(opts) + ')'
endglobal

snippet fapilog "description" b
FAPI_LOG($1`!p snip.rv=complete(t[1], ['INFO_LOG', 'DEBUG_LOG', 'ERROR_LOG', 'TRACE_LOG'])`, ("[$2`!p snip.rv=complete(t[2], ['FAPI_INT', 'IA_FAPI', 'FAPI WLS', 'FAPI_ULCONFIG', 'FAPI_DLCONFIG', 'FAPI_TX', 'RX_IND', 'FAPI_P5'])`] $3",$4));$0
endsnippet

snippet wlog "wacc logger" b
WACC_LOGGER($1`!p snip.rv=complete(t[1], ['INFO', 'DEBUG', 'ERROR', 'TRACE'])`, ("$2",$3));$0
endsnippet

snippet #if0 "wrap the selected text with #if0"
#if 0
	${1:${VISUAL:text}}
#endif
endsnippet

global !p
def remove_pattern(txt, pat):
	li = list(txt.split("\n"));
	for p in pat:
		if p in li: li.remove(p)
	
	return '\n'.join(li)
endglobal

snippet #dif "unwrap #if from selected text" b
${1:`!p
snip.rv = remove_pattern(snip.v.text, ["#if 0", "#endif"])
`}
endsnippet

snippet #ifdef
#ifdef $1
${0:${VISUAL:#type here}}
#endif
endsnippet

snippet []
[$0${VISUAL}]
endsnippet

snippet <>
<$0${VISUAL}>
endsnippet

snippet ()
($0${VISUAL}
endsnippet

snippet {}
{$0${VISUAL}
endsnippet

snippet d2s "#define2switch" b
case ${1:`!p
snip.rv = snip.v.text.split()[1]
`}: break;
endsnippet
